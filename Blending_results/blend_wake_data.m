function data = blend_wake_data(pp_data, sweep_val)

np = 1;
data(1, np).ydata = pp_data.Wake_potential.s.data(:,2) * 1E-9;
data(1, np).xdata = pp_data.Wake_potential.s.data(:,1) * 1E9;
data(1, np).Ylab = 'Wake potential (mV/pC)';
data(1, np).Xlab = 'Time (ns)';
data(1, np).out_name = 'wake_potential';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance.s.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance.s.data(:,1) * 1E-9;
data(1, np).Ylab = 'Real longitudinal wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'longitudinal_wake_impedance_real';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance_Im.s.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance_Im.s.data(:,1) * 1E-9;
data(1, np).Ylab = 'Imaginary longitudinal wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'longitudinal_wake_impedance_imaginary';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance.x.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance.x.data(:,1) * 1E-9;
data(1, np).Ylab = 'Real horizontal wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'horizontal_wake_impedance_real';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance_Im.x.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance_Im.x.data(:,1) * 1E-9;
data(1, np).Ylab = 'Imaginary horizontal wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'horizontal_wake_impedance_imaginary';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance.y.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance.y.data(:,1) * 1E-9;
data(1, np).Ylab = 'Real vertical wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'vertical_wake_impedance_real';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Wake_impedance_Im.y.data(:,2);
data(1, np).xdata = pp_data.Wake_impedance_Im.y.data(:,1) * 1E-9;
data(1, np).Ylab = 'Imaginary vertical wake impedance (\Omega)';
data(1, np).Xlab = 'Frequency (GHz)';
data(1, np).out_name = 'vertical_wake_impedance_imaginary';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = cumsum(pp_data.Energy.data(:,2));
data(1, np).xdata = pp_data.Energy.data(:,1) * 1e9;
data(1, np).Ylab = 'Cumulative energy (J)';
data(1, np).Xlab = 'Time (ns)';
data(1, np).out_name = 'cumulative_total_energy';
data(1, np).linewidth = 2;
data(1, np).islog = 0;
data(1, np).sweep_val = sweep_val;
np = np + 1;
data(1, np).ydata = pp_data.Energy.data(:,2);
data(1, np).xdata = pp_data.Energy.data(:,1) * 1e9;
data(1, np).Ylab = 'Energy (J)';
data(1, np).Xlab = 'Time (ns)';
data(1, np).out_name = 'Energy';
data(1, np).linewidth = 2;
data(1, np).islog = 1;
data(1, np).sweep_val = sweep_val;
np = np + 1;
if isfield(pp_data, 'voltages')
    for cnw = 1:length(pp_data.voltages)
 data(1, np).ydata = pp_data.voltages{cnw}.data(:,2);
    data(1, np).xdata = pp_data.voltages{cnw}.data(:,1) * 1e9;
    data(1, np).Ylab = 'Voltage (V)';
    data(1, np).Xlab = 'Time (ns)';
    data(1, np).out_name = pp_data.voltages{cnw}.title;
    data(1, np).linewidth = 2;
    data(1, np).islog = 0;
    data(1, np).sweep_val = sweep_val;
    np = np + 1;
    end %for
end %if
if isfield(pp_data, 'mat_losses')
    data(1, np).ydata = pp_data.mat_losses.total_loss * 1E9;
    data(1, np).xdata = pp_data.mat_losses.loss_time * 1e9;
    data(1, np).Ylab = 'Loss into materials (nJ)';
    data(1, np).Xlab = 'Time (ns)';
    data(1, np).out_name = 'Loss_into_materials';
    data(1, np).linewidth = 2;
    data(1, np).islog = 0;
    data(1, np).sweep_val = sweep_val;
    np = np + 1;
end %if
