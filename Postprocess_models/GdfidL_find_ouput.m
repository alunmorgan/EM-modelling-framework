function [ WP_l, WP_2, WP_3, WI_s, WI_x, WI_y, Port_mat, port_names, Energy, Energy_in_ceramics] = GdfidL_find_ouput(data_loc)
% finds the output generated by GdfidL and returns the paths for the different
% result types
%
% Example: [ WP_l, Port_mat, port_names, Energy, Energy_in_ceramics] = GdfidL_find_ouput(data_loc)

%
% Run name is the name prepended to the results by GdfidL.
% data loc is the path to the scratch location where the results files are
% stored.

% get the full list of files in the scratch directory.
run_list = dir_list_gen(data_loc, '',1);

% % select only the results which contain the run name.
% inds = find_position_in_cell_lst(strfind(full_list, [run_name,'_scratch']));
% run_list = full_list(inds);
% clear full_list

% now find the londitudinal wakepotential file.
inds = find_position_in_cell_lst(strfind(run_list, 'Wq_AT'));
WP_l = run_list(inds);

% now find the transverse wakepotential file.
% x
inds = find_position_in_cell_lst(strfind(run_list, 'WXq_AT'));
WP_2 = run_list(inds);
% y
inds = find_position_in_cell_lst(strfind(run_list, 'WYq_AT'));
WP_3 = run_list(inds);

%Find the GdfidL calculated impedances
%s
inds = find_position_in_cell_lst(strfind(run_list, 'ImZ_AT'));
WI_s = run_list(inds);
%x
inds = find_position_in_cell_lst(strfind(run_list, 'ImZx_AT'));
WI_x = run_list(inds);
%y
inds = find_position_in_cell_lst(strfind(run_list, 'ImZy_AT'));
WI_y = run_list(inds);
% now find the Energy files. The order is determined by the order they are
% called in the post processing file.
inds = find_position_in_cell_lst(strfind(run_list, 'oneDPlot'));
if ~isempty(inds)
    Energy = run_list(inds(1));
    Energy_in_ceramics = run_list(inds(2));
else
    warning('No Energy graphs - This is a problem')
    Energy = NaN;
    Energy_in_ceramics = NaN;
end

% Find list of ports.
inds = find_position_in_cell_lst(strfind(run_list, 'Port='));
Ports = run_list(inds);
% Put the paths into a grid of port vs mode

% first find the port names.
nme_start = strfind(Ports, 'Port=');
% Dealing with change of output in the log file.
nme_end1 = strfind(Ports, '_amp_of_mode=');
nme_end2 = strfind(Ports, '_amp_of_Mode=');
% Now the port modes.
mode_end = strfind(Ports, '-tim');
port_names_list = cell(1,1);
port_modes = NaN;
for nr = 1:length(Ports)
    if isempty(nme_end1{nr})
        if isempty(nme_end2{nr})
            port_names_list{nr} = '';
            port_modes(nr) = NaN;
            continue
        else
            nme_end = nme_end2;
        end %if
    else
        nme_end = nme_end1;
    end %if
    port_names_list{nr} = Ports{nr}(nme_start{nr}+5:nme_end{nr}-1);
    port_modes(nr) = str2num(Ports{nr}(nme_end{nr}+15:mode_end{nr}-1));
end %for
% find the unique port names
port_names = unique(port_names_list);
if length(port_names) == 1 && isempty(port_names{1})
    warning('No Port data - This is a problem')
    Port_mat = NaN;
    port_names = NaN;
else
    % put them in a matrix
    Port_mat = cell(1,1);
    for hs = 1:length(Ports)
        p_ind = find_position_in_cell_lst(strfind(port_names, port_names_list{hs}));
        Port_mat{p_ind,port_modes(hs)} = Ports{hs};
    end
end
